from datetime import datetime
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from states import AdminStates
from database import Database
from notifications import NotificationService

def register_admin_handlers(dp: Dispatcher, db: Database, notification_service: NotificationService):
    
    admin_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë• –í—Å–µ –∫—É—Ä–∞—Ç–æ—Ä—ã"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞"), KeyboardButton(text="üîó –ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")],
            [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å"), KeyboardButton(text="üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞")],
            [KeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞"), KeyboardButton(text="üë• –ë–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å –∞–¥–º–∏–Ω–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    async def check_admin_access(message: Message) -> bool:
        if not await db.is_admin(message.from_user.id):
            await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return False
        return True

    @dp.message(Command("admin"))
    async def admin_handler(message: Message):
        if not await check_admin_access(message):
            return
            
        await message.answer(
            "üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏:",
            reply_markup=admin_keyboard
        )

    @dp.message(Command("all_curators"))
    async def all_curators_handler(message: Message):
        if not await check_admin_access(message):
            return
            
        curators = await db.get_all_curators()
        
        if not curators:
            await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        
        response = "üë• *–í—Å–µ –∫—É—Ä–∞—Ç–æ—Ä—ã:*\n\n"
        
        for curator in curators:
            stats = await db.get_curator_stats(curator['user_id'])
            name = f"{curator['first_name']} {curator['last_name']}" if curator['first_name'] and curator['last_name'] else curator['username'] or f"ID: {curator['user_id']}"
            
            response += f"*{name}* (ID: {curator['user_id']})\n"
            response += f"   üë• –£—á–µ–Ω–∏–∫–æ–≤: {stats['student_count']}\n"
            response += f"   üìù –û—Ç—á–µ—Ç–æ–≤: {stats['total_reports']}\n"
            response += f"   üì≠ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {stats['unread_reports']}\n\n"
        
        await message.answer(response)

    @dp.message(Command("add_curator"))
    async def add_curator_handler(message: Message, state: FSMContext):
        if not await check_admin_access(message):
            return
            
        await state.set_state(AdminStates.waiting_for_curator_id)
        await message.answer(
            "üë§ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º.\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
        )

    @dp.message(AdminStates.waiting_for_curator_id)
    async def process_curator_id(message: Message, state: FSMContext):
        try:
            curator_id = int(message.text)
            
            await db.add_user(
                user_id=curator_id,
                user_type='curator'
            )
            await state.clear()
            
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {curator_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä–æ–º!\n"
                f"–¢–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /curator –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞."
            )
            
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).")

    @dp.message(Command("assign_student"))
    async def assign_student_handler(message: Message, state: FSMContext):
        if not await check_admin_access(message):
            return
            
        students = await db.get_students_without_curators()
        curators = await db.get_all_curators()
        
        if not students:
            await message.answer("–í—Å–µ —É—á–µ–Ω–∏–∫–∏ —É–∂–µ –∏–º–µ—é—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
            
        if not curators:
            await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        
        await state.set_state(AdminStates.waiting_for_student_to_assign)
        await state.update_data(curators=curators)
        
        response = "üë• *–í—ã–±–µ—Ä–∏ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞:*\n\n"
        for i, student in enumerate(students[:10], 1):
            name = f"{student['first_name']} {student['last_name']}" if student['first_name'] and student['last_name'] else student['username'] or f"ID: {student['user_id']}"
            response += f"{i}. {name} (ID: {student['user_id']})\n"
        
        if len(students) > 10:
            response += f"... –∏ –µ—â–µ {len(students) - 10} —É—á–µ–Ω–∏–∫–æ–≤\n"
        
        response += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞:"
        await message.answer(response)

    @dp.message(AdminStates.waiting_for_student_to_assign)
    async def process_student_selection(message: Message, state: FSMContext):
        try:
            student_num = int(message.text)
            data = await state.get_data()
            students = await db.get_students_without_curators()
            
            if 1 <= student_num <= len(students):
                student = students[student_num - 1]
                await state.update_data(selected_student=student)
                await state.set_state(AdminStates.waiting_for_curator_to_assign)
                
                curators = data['curators']
                response = f"üë§ *–í—ã–±—Ä–∞–Ω —É—á–µ–Ω–∏–∫:* {student['first_name']} {student['last_name']} (ID: {student['user_id']})\n\n"
                response += "üë• *–í—ã–±–µ—Ä–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:*\n\n"
                
                for i, curator in enumerate(curators, 1):
                    name = f"{curator['first_name']} {curator['last_name']}" if curator['first_name'] and curator['last_name'] else curator['username'] or f"ID: {curator['user_id']}"
                    response += f"{i}. {name} (ID: {curator['user_id']})\n"
                
                response += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä–∞—Ç–æ—Ä–∞:"
                await message.answer(response)
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞.")

    @dp.message(AdminStates.waiting_for_curator_to_assign)
    async def process_curator_selection(message: Message, state: FSMContext):
        try:
            curator_num = int(message.text)
            data = await state.get_data()
            curators = data['curators']
            student = data['selected_student']
            
            if 1 <= curator_num <= len(curators):
                curator = curators[curator_num - 1]
                
                await db.assign_student_to_curator(student['user_id'], curator['user_id'])
                await state.clear()
                
                await message.answer(
                    f"‚úÖ *–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!*\n\n"
                    f"üë§ –£—á–µ–Ω–∏–∫: {student['first_name']} {student['last_name']} (ID: {student['user_id']})\n"
                    f"üë®‚Äçüè´ –ö—É—Ä–∞—Ç–æ—Ä: {curator['first_name']} {curator['last_name']} (ID: {curator['user_id']})\n\n"
                    f"–¢–µ–ø–µ—Ä—å –∫—É—Ä–∞—Ç–æ—Ä –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç—á–µ—Ç–∞—Ö —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞."
                )
                
                await notification_service.notify_student_curator_assigned(student['user_id'])
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É—Ä–∞—Ç–æ—Ä–∞.")

    @dp.message(Command("remove_relation"))
    async def remove_relation_handler(message: Message, state: FSMContext):
        if not await check_admin_access(message):
            return
            
        await state.set_state(AdminStates.waiting_for_student_id)
        await message.answer(
            "üîó *–£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –∫—É—Ä–∞—Ç–æ—Ä-—É—á–µ–Ω–∏–∫*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —É—á–µ–Ω–∏–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º."
        )

    @dp.message(AdminStates.waiting_for_student_id)
    async def process_remove_relation(message: Message, state: FSMContext):
        try:
            student_id = int(message.text)
            curator = await db.get_student_curator(student_id)
            
            if curator:
                await db.remove_curator_student_relation(curator['user_id'], student_id)
                await state.clear()
                
                await message.answer(
                    f"‚úÖ –°–≤—è–∑—å —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ ID {student_id}.\n"
                    f"–ö—É—Ä–∞—Ç–æ—Ä: {curator['first_name']} {curator['last_name']}"
                )
            else:
                await message.answer(f"‚ùå –£ —É—á–µ–Ω–∏–∫–∞ ID {student_id} –Ω–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞.")
                
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—á–µ–Ω–∏–∫–∞ (—á–∏—Å–ª–æ).")

    @dp.message(Command("deactivate_curator"))
    async def deactivate_curator_handler(message: Message, state: FSMContext):
        if not await check_admin_access(message):
            return
            
        await state.set_state(AdminStates.waiting_for_curator_id)
        await message.answer(
            "üö´ *–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫—É—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å."
        )

    @dp.message(AdminStates.waiting_for_curator_id)
    async def process_deactivate_curator(message: Message, state: FSMContext):
        try:
            curator_id = int(message.text)
            
            await db.deactivate_curator(curator_id)
            await state.clear()
            
            await message.answer(f"‚úÖ –ö—É—Ä–∞—Ç–æ—Ä ID {curator_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫—É—Ä–∞—Ç–æ—Ä–∞ (—á–∏—Å–ª–æ).")

    @dp.message(Command("activate_curator"))
    async def activate_curator_handler(message: Message, state: FSMContext):
        if not await check_admin_access(message):
            return
            
        await state.set_state(AdminStates.waiting_for_curator_id)
        await message.answer(
            "‚úÖ *–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫—É—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å."
        )

    @dp.message(Command("students_without_curators"))
    async def students_without_curators_handler(message: Message):
        if not await check_admin_access(message):
            return
            
        students = await db.get_students_without_curators()
        
        if not students:
            await message.answer("‚úÖ –í—Å–µ —É—á–µ–Ω–∏–∫–∏ –∏–º–µ—é—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        
        response = "üë• *–£—á–µ–Ω–∏–∫–∏ –±–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤:*\n\n"
        for student in students:
            name = f"{student['first_name']} {student['last_name']}" if student['first_name'] and student['last_name'] else student['username'] or f"ID: {student['user_id']}"
            response += f"‚Ä¢ {name} (ID: {student['user_id']})\n"
        
        response += f"\nüìä –í—Å–µ–≥–æ –±–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: {len(students)}"
        await message.answer(response)

    @dp.message(Command("admin_stats"))
    async def admin_stats_handler(message: Message):
        if not await check_admin_access(message):
            return
            
        curators = await db.get_all_curators()
        students_with_curators = await db.get_all_students_with_curators()
        students_without_curators = await db.get_students_without_curators()
        
        total_curators = len(curators)
        total_students = len(students_with_curators) + len(students_without_curators)
        students_with_curators_count = len([s for s in students_with_curators if s['curator_id']])
        
        response = "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:*\n\n"
        response += f"üë®‚Äçüè´ –í—Å–µ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: {total_curators}\n"
        response += f"üë• –í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤: {total_students}\n"
        response += f"üîó –° –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏: {students_with_curators_count}\n"
        response += f"‚ùå –ë–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: {len(students_without_curators)}\n\n"
        
        if curators:
            response += "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º:*\n"
            for curator in curators[:5]:
                stats = await db.get_curator_stats(curator['user_id'])
                name = f"{curator['first_name']} {curator['last_name']}" if curator['first_name'] and curator['last_name'] else curator['username'] or f"ID: {curator['user_id']}"
                response += f"‚Ä¢ {name}: {stats['student_count']} —É—á–µ–Ω–∏–∫–æ–≤, {stats['unread_reports']} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö\n"
            
            if len(curators) > 5:
                response += f"... –∏ –µ—â–µ {len(curators) - 5} –∫—É—Ä–∞—Ç–æ—Ä–æ–≤"
        
        await message.answer(response)

    @dp.message(Command("all_students_admin"))
    async def all_students_admin_handler(message: Message):
        if not await check_admin_access(message):
            return
            
        students = await db.get_all_students_with_curators()
        
        if not students:
            await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")
            return
        
        response = "üë• *–í—Å–µ —É—á–µ–Ω–∏–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:*\n\n"
        
        for student in students:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —É—á–µ–Ω–∏–∫–∞
            student_name = f"{student['first_name']} {student['last_name']}" if student['first_name'] and student['last_name'] else student['username'] or f"ID: {student['user_id']}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∫—É—Ä–∞—Ç–æ—Ä–∞
            if student['curator_id']:
                curator_name = f"{student['curator_first_name']} {student['curator_last_name']}" if student['curator_first_name'] and student['curator_last_name'] else student['curator_username'] or f"ID: {student['curator_id']}"
                curator_status = f"üë®‚Äçüè´ {curator_name}"
            else:
                curator_status = "‚ùå –ë–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞"
            
            response += f"*{student_name}* (ID: {student['user_id']})\n"
            response += f"   {curator_status}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_students = len(students)
        with_curators = len([s for s in students if s['curator_id']])
        without_curators = total_students - with_curators
        
        response += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        response += f"–í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤: {total_students}\n"
        response += f"–° –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏: {with_curators}\n"
        response += f"–ë–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: {without_curators}"
        
        await message.answer(response)

    @dp.message(lambda message: message.text == "üë• –í—Å–µ –∫—É—Ä–∞—Ç–æ—Ä—ã")
    async def button_all_curators_handler(message: Message):
        await all_curators_handler(message)

    @dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    async def button_admin_stats_handler(message: Message):
        await admin_stats_handler(message)

    @dp.message(lambda message: message.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞")
    async def button_add_curator_handler(message: Message, state: FSMContext):
        await add_curator_handler(message, state)

    @dp.message(lambda message: message.text == "üîó –ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
    async def button_assign_student_handler(message: Message, state: FSMContext):
        await assign_student_handler(message, state)

    @dp.message(lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å")
    async def button_remove_relation_handler(message: Message, state: FSMContext):
        await remove_relation_handler(message, state)

    @dp.message(lambda message: message.text == "üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞")
    async def button_deactivate_curator_handler(message: Message, state: FSMContext):
        await deactivate_curator_handler(message, state)

    @dp.message(lambda message: message.text == "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞")
    async def button_activate_curator_handler(message: Message, state: FSMContext):
        await activate_curator_handler(message, state)

    @dp.message(lambda message: message.text == "üë• –ë–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤")
    async def button_students_without_curators_handler(message: Message):
        await students_without_curators_handler(message)

    @dp.message(lambda message: message.text == "üë• –í—Å–µ —É—á–µ–Ω–∏–∫–∏")
    async def button_all_students_admin_handler(message: Message):
        await all_students_admin_handler(message)

    @dp.message(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å –∞–¥–º–∏–Ω–∞")
    async def button_admin_help_handler(message: Message):
        from bot import get_role_based_help
        help_text, keyboard = await get_role_based_help(message.from_user.id)
        await message.answer(help_text, reply_markup=keyboard)

    @dp.message(Command("notify_curators"))
    async def notify_curators_handler(message: Message):
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫—É—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö"""
        if not await check_admin_access(message):
            return
            
        try:
            await notification_service.send_curator_missing_reports_notifications()
            await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
