from datetime import datetime
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from states import ReportStates
from database import Database
from notifications import NotificationService

def register_student_handlers(dp: Dispatcher, db: Database, notification_service: NotificationService):
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
    student_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"), KeyboardButton(text="üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    
    @dp.message(Command("start"))
    async def start_handler(message: Message):
        user = message.from_user
        await db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–º–æ—â–∏
        from bot import get_role_based_help
        help_text, keyboard = await get_role_based_help(user.id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        greeting = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\n\n"
        await message.answer(greeting + help_text, reply_markup=keyboard)

    @dp.message(Command("help"))
    async def help_handler(message: Message):
        from bot import get_role_based_help
        help_text, keyboard = await get_role_based_help(message.from_user.id)
        await message.answer(help_text, reply_markup=keyboard)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    @dp.message(lambda message: message.text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
    async def button_report_handler(message: Message, state: FSMContext):
        await report_handler(message, state)

    @dp.message(lambda message: message.text == "üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã")
    async def button_my_reports_handler(message: Message):
        await my_reports_handler(message)

    @dp.message(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
    async def button_help_handler(message: Message):
        await help_handler(message)

    @dp.message(Command("report"))
    async def report_handler(message: Message, state: FSMContext):
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —É—á–µ–Ω–∏–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä
        curator = await db.get_student_curator(user_id)
        if not curator:
            await message.answer(
                "‚ùå *–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞!*\n\n"
                "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –∑–∞ —Ç–æ–±–æ–π –±—ã–ª –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä.\n\n"
                "*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞*.\n\n"
                "–ü–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã.",
                reply_markup=student_keyboard,
                parse_mode='Markdown'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        current_week_reports = await db.get_reports_for_current_week(user_id)
        if current_week_reports:
            from datetime import datetime
            report_date = datetime.fromisoformat(current_week_reports[0]['created_at'])
            await message.answer(
                f"‚è∞ *–û—Ç—á–µ—Ç –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!*\n\n"
                f"–¢–≤–æ–π –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {report_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
                f"–°–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É 'üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤.",
                reply_markup=student_keyboard,
                parse_mode='Markdown'
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç—Ç–∞–ø –¥–ª—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏
        last_stage = await db.get_last_stage_choice(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏
        stage_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìö –ò–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –ë–ª–æ–∫ 1. –û—Å–Ω–æ–≤—ã —è–∑—ã–∫–∞", callback_data="stage_block1")],
                [InlineKeyboardButton(text="üìö –ò–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –ë–ª–æ–∫ 2. –û–û–ü", callback_data="stage_block2")],
                [InlineKeyboardButton(text="üìö –ò–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –ë–ª–æ–∫ 3. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å", callback_data="stage_block3")],
                [InlineKeyboardButton(text="üìö –ò–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –ë–ª–æ–∫ 4. –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="stage_block4")],
                [InlineKeyboardButton(text="üìñ –ò–∑—É—á–µ–Ω–∏–µ –ª–µ–≥–µ–Ω–¥—ã", callback_data="stage_legend")],
                [InlineKeyboardButton(text="üíº –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º —Ä–µ–∑—é–º–µ", callback_data="stage_fake_resume")],
                [InlineKeyboardButton(text="üíº –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∑—é–º–µ", callback_data="stage_real_resume")]
            ]
        )
        
        await state.set_state(ReportStates.waiting_for_stage_selection)
        
        message_text = "üìù –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞!\n\n*–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø:*"
        
        if last_stage:
            message_text += f"\n\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –í –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ —Ç—ã –≤—ã–±—Ä–∞–ª '{last_stage}'"
        
        await message.answer(message_text, reply_markup=stage_keyboard, parse_mode='Markdown')

    @dp.message(Command("my_reports"))
    async def my_reports_handler(message: Message):
        user_id = message.from_user.id
        reports = await db.get_user_reports(user_id)
        
        if not reports:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        current_week_reports = await db.get_reports_for_current_week(user_id)
        next_report_info = ""
        if current_week_reports:
            from datetime import datetime
            report_date = datetime.fromisoformat(current_week_reports[0]['created_at'])
            next_report_info = f"\n‚è∞ –û—Ç—á–µ—Ç –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({report_date.strftime('%d.%m.%Y')})\nüìÖ –°–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
        else:
            next_report_info = "\n‚úÖ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é!"
        
        response = "üìä –¢–≤–æ–∏ –æ—Ç—á–µ—Ç—ã:\n\n"
        for i, report in enumerate(reports[:5], 1):
            date = datetime.fromisoformat(report['created_at']).strftime('%d.%m.%Y')
            response += f"*{i}. {date}*\n"
            response += f"üéØ –≠—Ç–∞–ø: {report['current_stage']}\n"
            response += f"üìã –ü–ª–∞–Ω—ã: {report['plans'][:50]}{'...' if len(report['plans']) > 50 else ''}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
            if report['plans_completed'] is not None:
                if report['plans_completed']:
                    response += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤: –î–∞\n"
                else:
                    response += f"‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤: –ù–µ—Ç\n"
                    if report['plans_failure_reason']:
                        response += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {report['plans_failure_reason'][:50]}{'...' if len(report['plans_failure_reason']) > 50 else ''}\n"
            
            response += f"‚ùì –ü—Ä–æ–±–ª–µ–º—ã: {report['problems'][:50]}{'...' if len(report['problems']) > 50 else ''}\n\n"
        
        if len(reports) > 5:
            response += f"... –∏ –µ—â–µ {len(reports) - 5} –æ—Ç—á–µ—Ç–æ–≤"
        
        response += next_report_info
        
        await message.answer(response, parse_mode='Markdown')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–ø–∞
    @dp.callback_query(lambda c: c.data.startswith('stage_'))
    async def process_stage_selection(callback, state: FSMContext):
        stage_mapping = {
            'stage_block1': '–ò–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –ë–ª–æ–∫ 1. –û—Å–Ω–æ–≤—ã —è–∑—ã–∫–∞',
            'stage_block2': '–ò–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –ë–ª–æ–∫ 2. –û–û–ü',
            'stage_block3': '–ò–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –ë–ª–æ–∫ 3. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å',
            'stage_block4': '–ò–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –ë–ª–æ–∫ 4. –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
            'stage_legend': '–ò–∑—É—á–µ–Ω–∏–µ –ª–µ–≥–µ–Ω–¥—ã',
            'stage_fake_resume': '–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ñ–µ–π–∫ —Ä–µ–∑—é–º–µ',
            'stage_real_resume': '–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∑—é–º–µ'
        }
        
        selected_stage = stage_mapping.get(callback.data)
        if selected_stage:
            await state.update_data(current_stage=selected_stage)
            await state.set_state(ReportStates.waiting_for_plans)
            
            cancel_keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç—á–µ—Ç—ã
            has_previous = await db.has_previous_reports(callback.from_user.id)
            
            if has_previous:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç—á–µ—Ç—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤
                await state.set_state(ReportStates.waiting_for_plans_completion)
                completion_keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –î–∞, –≤—ã–ø–æ–ª–Ω–∏–ª", callback_data="plans_yes")],
                        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª", callback_data="plans_no")]
                    ]
                )
                
                await callback.message.edit_text(
                    f"‚úÖ *–í—ã–±—Ä–∞–Ω —ç—Ç–∞–ø:* {selected_stage}\n\n"
                    "*–£–¥–∞–ª–æ—Å—å –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?*",
                    parse_mode='Markdown'
                )
                await callback.message.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç:",
                    reply_markup=completion_keyboard
                )
            else:
                # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –æ –ø–ª–∞–Ω–∞—Ö
                await callback.message.edit_text(
                    f"‚úÖ *–í—ã–±—Ä–∞–Ω —ç—Ç–∞–ø:* {selected_stage}\n\n"
                    "*–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–µ–ª–∞—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é?*\n\n"
                    "–û–ø–∏—à–∏ —Å–≤–æ–∏ –ø–ª–∞–Ω—ã:",
                    parse_mode='Markdown'
                )
                await callback.message.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ–∏ –ø–ª–∞–Ω—ã:",
                    reply_markup=cancel_keyboard
                )
            
            await callback.answer()

    @dp.message(ReportStates.waiting_for_stage_selection)
    async def process_stage_selection_text(message: Message, state: FSMContext):
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await message.answer("‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=student_keyboard)
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —ç—Ç–∞–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ ‚¨ÜÔ∏è",
            reply_markup=student_keyboard
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤
    @dp.callback_query(lambda c: c.data in ['plans_yes', 'plans_no'])
    async def process_plans_completion(callback, state: FSMContext):
        if callback.data == 'plans_yes':
            await state.update_data(plans_completed=True)
            await state.set_state(ReportStates.waiting_for_plans)
            
            cancel_keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            
            await callback.message.edit_text(
                "‚úÖ *–û—Ç–ª–∏—á–Ω–æ!* —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ.\n\n"
                "*–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–µ–ª–∞—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é?*",
                parse_mode='Markdown'
            )
            await callback.message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ–∏ –ø–ª–∞–Ω—ã:",
                reply_markup=cancel_keyboard
            )
        else:  # plans_no
            await state.update_data(plans_completed=False)
            await state.set_state(ReportStates.waiting_for_plans_failure_reason)
            
            cancel_keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            
            await callback.message.edit_text(
                "‚ùå *–ü–æ–Ω—è—Ç–Ω–æ.* –ù–µ –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å.\n\n"
                "*–ü–æ—á–µ–º—É –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞–Ω—ã?*",
                parse_mode='Markdown'
            )
            await callback.message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—ä—è—Å–Ω–∏ –ø—Ä–∏—á–∏–Ω—ã:",
                reply_markup=cancel_keyboard
            )
        
        await callback.answer()

    @dp.message(ReportStates.waiting_for_plans_completion)
    async def process_plans_completion_text(message: Message, state: FSMContext):
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await message.answer("‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=student_keyboard)
            return
        
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ ‚¨ÜÔ∏è",
            reply_markup=student_keyboard
        )

    @dp.message(ReportStates.waiting_for_plans_failure_reason)
    async def process_plans_failure_reason(message: Message, state: FSMContext):
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await message.answer("‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=student_keyboard)
            return
            
        if len(message.text) < 5:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –ø—Ä–∏—á–∏–Ω–∞—Ö (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        
        await state.update_data(plans_failure_reason=message.text)
        await state.set_state(ReportStates.waiting_for_plans)
        
        cancel_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            "*–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–µ–ª–∞—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é?*\n\n"
            "–û–ø–∏—à–∏ —Å–≤–æ–∏ –ø–ª–∞–Ω—ã:",
            reply_markup=cancel_keyboard,
            parse_mode='Markdown'
        )

    @dp.message(ReportStates.waiting_for_plans)
    async def process_plans(message: Message, state: FSMContext):
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await message.answer("‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=student_keyboard)
            return
            
        if len(message.text) < 5:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ —Å–≤–æ–∏—Ö –ø–ª–∞–Ω–∞—Ö (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        
        await state.update_data(plans=message.text)
        await state.set_state(ReportStates.waiting_for_problems)
        
        cancel_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            "*–ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?*\n\n"
            "–û–ø–∏—à–∏—Ç–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å.",
            reply_markup=cancel_keyboard,
            parse_mode='Markdown'
        )

    @dp.message(ReportStates.waiting_for_problems)
    async def process_problems(message: Message, state: FSMContext):
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await message.answer("‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=student_keyboard)
            return
            
        data = await state.get_data()
        user_id = message.from_user.id
        
        await db.save_report(
            user_id=user_id,
            current_stage=data['current_stage'],
            plans=data['plans'],
            problems=message.text,
            plans_completed=data.get('plans_completed'),
            plans_failure_reason=data.get('plans_failure_reason')
        )
        
        await state.clear()
        await message.answer(
            "‚úÖ *–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*\n\n"
            f"üéØ *–≠—Ç–∞–ø:* {data['current_stage']}\n"
            f"üìã *–ü–ª–∞–Ω—ã:* {data['plans']}\n"
            f"‚ùì *–ü—Ä–æ–±–ª–µ–º—ã:* {message.text}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π—É —Ä–∞–±–æ—Ç—É! –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é.",
            reply_markup=student_keyboard,
            parse_mode='Markdown'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –æ—Ç—á–µ—Ç–µ
        await notification_service.notify_curator_new_report(user_id, {
            'current_stage': data['current_stage'],
            'plans': data['plans'],
            'problems': message.text
        })
