from datetime import datetime
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from states import CuratorStates
from database import Database
from notifications import NotificationService

def register_curator_handlers(dp: Dispatcher, db: Database, notification_service: NotificationService):
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
    curator_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"), KeyboardButton(text="üë• –ú–æ–∏ —É—á–µ–Ω–∏–∫–∏")],
            [KeyboardButton(text="üìã –í—Å–µ —É—á–µ–Ω–∏–∫–∏"), KeyboardButton(text="üìù –û—Ç—á–µ—Ç—ã")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    
    @dp.message(Command("curator"))
    async def curator_handler(message: Message):
        user = message.from_user
        user_id = user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        is_admin = await db.is_admin(user_id)
        current_user_type = await db.get_user_type(user_id)
        
        if not is_admin and current_user_type != 'curator':
            await message.answer(
                "‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!*\n\n"
                "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            return
        
        await db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            user_type='curator'
        )
        
        await message.answer(
            "üë®‚Äçüè´ *–†–µ–∂–∏–º –∫—É—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=curator_keyboard
        )

    @dp.message(Command("add_student"))
    async def add_student_handler(message: Message, state: FSMContext):
        await state.set_state(CuratorStates.waiting_for_student_id)
        await message.answer(
            "üë§ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å ID —É—á–µ–Ω–∏–∫–∞ (—á–∏—Å–ª–æ), –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å–µ–±–µ.\n"
            "–£—á–µ–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /start"
        )

    @dp.message(CuratorStates.waiting_for_student_id)
    async def process_student_id(message: Message, state: FSMContext):
        try:
            student_id = int(message.text)
            curator_id = message.from_user.id
            
            await db.add_curator_student_relation(curator_id, student_id)
            await state.clear()
            
            await message.answer(
                f"‚úÖ –£—á–µ–Ω–∏–∫ —Å ID {student_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ç–µ–±–µ!\n"
                f"–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –µ–≥–æ –æ—Ç—á–µ—Ç–∞—Ö."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
            await notification_service.notify_student_curator_assigned(student_id)
                
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—á–µ–Ω–∏–∫–∞ (—á–∏—Å–ª–æ).")

    @dp.message(Command("my_students"))
    async def my_students_handler(message: Message):
        curator_id = message.from_user.id
        students = await db.get_curator_students(curator_id)
        
        if not students:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π /add_student –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
            return
        
        response = "üë• *–¢–≤–æ–∏ —É—á–µ–Ω–∏–∫–∏:*\n\n"
        for student in students:
            name = f"{student['first_name']} {student['last_name']}" if student['first_name'] and student['last_name'] else student['username'] or f"ID: {student['user_id']}"
            response += f"‚Ä¢ {name} (ID: {student['user_id']})\n"
        
        await message.answer(response)

    @dp.message(Command("all_students"))
    async def all_students_handler(message: Message):
        students = await db.get_all_students_with_curators()
        
        if not students:
            await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")
            return
        
        response = "üë• *–í—Å–µ —É—á–µ–Ω–∏–∫–∏ –∏ –∏—Ö –∫—É—Ä–∞—Ç–æ—Ä—ã:*\n\n"
        
        for student in students:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —É—á–µ–Ω–∏–∫–∞
            student_name = f"{student['first_name']} {student['last_name']}" if student['first_name'] and student['last_name'] else student['username'] or f"ID: {student['user_id']}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∫—É—Ä–∞—Ç–æ—Ä–∞
            if student['curator_id']:
                curator_name = f"{student['curator_first_name']} {student['curator_last_name']}" if student['curator_first_name'] and student['curator_last_name'] else student['curator_username'] or f"ID: {student['curator_id']}"
                curator_status = f"üë®‚Äçüè´ {curator_name}"
            else:
                curator_status = "‚ùå –ë–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞"
            
            response += f"*{student_name}* (ID: {student['user_id']})\n"
            response += f"   {curator_status}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_students = len(students)
        with_curators = len([s for s in students if s['curator_id']])
        without_curators = total_students - with_curators
        
        response += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        response += f"–í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤: {total_students}\n"
        response += f"–° –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏: {with_curators}\n"
        response += f"–ë–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: {without_curators}"
        
        await message.answer(response)

    @dp.message(Command("reports"))
    async def reports_handler(message: Message):
        curator_id = message.from_user.id
        reports = await db.get_unread_reports_for_curator(curator_id)
        
        if not reports:
            await message.answer("üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.")
            return
        
        for report in reports[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –æ—Ç—á–µ—Ç–æ–≤
            date = datetime.fromisoformat(report['created_at']).strftime('%d.%m.%Y %H:%M')
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π", callback_data=f"read_{report['id']}")]
            ])
            
            await message.answer(
                f"üìù *–û—Ç—á–µ—Ç –æ—Ç {report['student_name']}*\n"
                f"üìÖ {date}\n\n"
                f"üéØ *–≠—Ç–∞–ø:* {report['current_stage']}\n"
                f"üìã *–ü–ª–∞–Ω—ã:* {report['plans']}\n"
                f"‚ùì *–ü—Ä–æ–±–ª–µ–º—ã:* {report['problems']}",
                reply_markup=keyboard
            )
        
        if len(reports) > 5:
            await message.answer(f"... –∏ –µ—â–µ {len(reports) - 5} –æ—Ç—á–µ—Ç–æ–≤")

    @dp.callback_query(lambda c: c.data.startswith('read_'))
    async def mark_report_read(callback: CallbackQuery):
        report_id = int(callback.data.split('_')[1])
        curator_id = callback.from_user.id
        
        await db.mark_report_as_read(report_id, curator_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á–µ—Ç–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
        report = await db.get_report_by_id(report_id)
        if report:
            await notification_service.notify_student_report_read(report['user_id'], report)
        
        await callback.answer("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π!")
        await callback.message.edit_text(
            callback.message.text + "\n\n‚úÖ *–ü–†–û–ß–ò–¢–ê–ù–û*",
            reply_markup=None
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
    @dp.message(lambda message: message.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
    async def button_add_student_handler(message: Message, state: FSMContext):
        await add_student_handler(message, state)

    @dp.message(lambda message: message.text == "üë• –ú–æ–∏ —É—á–µ–Ω–∏–∫–∏")
    async def button_my_students_handler(message: Message):
        await my_students_handler(message)

    @dp.message(lambda message: message.text == "üìã –í—Å–µ —É—á–µ–Ω–∏–∫–∏")
    async def button_all_students_handler(message: Message):
        await all_students_handler(message)

    @dp.message(lambda message: message.text == "üìù –û—Ç—á–µ—Ç—ã")
    async def button_reports_handler(message: Message):
        await reports_handler(message)

    @dp.message(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
    async def button_help_handler(message: Message):
        from bot import get_role_based_help
        help_text, keyboard = await get_role_based_help(message.from_user.id)
        await message.answer(help_text, reply_markup=keyboard)
