import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from database import Database
from config import BOT_TOKEN

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db = Database()

@dp.message(Command("start"))
async def start_handler(message: Message):
    user = message.from_user
    await db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/report - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç\n"
        "/my_reports - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –æ—Ç—á–µ—Ç—ã\n"
        "/help - –ø–æ–º–æ—â—å"
    )

@dp.message(Command("help"))
async def help_handler(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
        "/report - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç\n"
        "/my_reports - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –æ—Ç—á–µ—Ç—ã\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç."
    )

@dp.message(Command("report"))
async def report_handler(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç. "
        "–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã –∏–∑—É—á–∏–ª–∏, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏, "
        "—Å –∫–∞–∫–∏–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å –∏ —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é."
    )

@dp.message(Command("my_reports"))
async def my_reports_handler(message: Message):
    user_id = message.from_user.id
    reports = await db.get_user_reports(user_id)
    
    if not reports:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤.")
        return
    
    response = "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã:\n\n"
    for i, report in enumerate(reports[:10], 1):
        date = datetime.fromisoformat(report['created_at']).strftime('%d.%m.%Y %H:%M')
        text = report['text'][:100] + "..." if len(report['text']) > 100 else report['text']
        response += f"{i}. {date}\n{text}\n\n"
    
    if len(reports) > 10:
        response += f"... –∏ –µ—â–µ {len(reports) - 10} –æ—Ç—á–µ—Ç–æ–≤"
    
    await message.answer(response)

@dp.message(F.text)
async def text_handler(message: Message):
    user_id = message.from_user.id
    text = message.text
    
    if len(text) < 10:
        await message.answer(
            "–û—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç "
            "(–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return
    
    await db.save_report(user_id, text)
    await message.answer(
        "‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É. "
        "–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é."
    )

async def send_weekly_reminders():
    while True:
        try:
            users = await db.get_all_active_users()
            current_time = datetime.now()
            
            for user in users:
                last_report = await db.get_last_report_date(user['user_id'])
                
                if last_report is None or (current_time - last_report).days >= 7:
                    try:
                        await bot.send_message(
                            user['user_id'],
                            "üìù –í—Ä–µ–º—è –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞!\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã –∏–∑—É—á–∏–ª–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ, "
                            "–∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∏ —Å –∫–∞–∫–∏–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å. "
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /report –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞."
                        )
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
            
            await asyncio.sleep(3600)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            await asyncio.sleep(3600)

async def main():
    await db.init_db()
    
    reminder_task = asyncio.create_task(send_weekly_reminders())
    
    try:
        await dp.start_polling(bot)
    finally:
        reminder_task.cancel()

if __name__ == "__main__":
    asyncio.run(main())
