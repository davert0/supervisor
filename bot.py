import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from database import Database
from notifications import NotificationService
from scheduler import Scheduler
from handlers.student_handlers import register_student_handlers
from handlers.curator_handlers import register_curator_handlers
from handlers.admin_handlers import register_admin_handlers
from config import BOT_TOKEN

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database()
notification_service = NotificationService(bot, db)
scheduler = Scheduler(notification_service)

register_student_handlers(dp, db, notification_service)
register_curator_handlers(dp, db, notification_service)
register_admin_handlers(dp, db, notification_service)

async def get_role_based_help(user_id: int) -> tuple[str, ReplyKeyboardMarkup]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç help-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    is_admin = await db.is_admin(user_id)
    user_type = await db.get_user_type(user_id)
    
    if is_admin:
        help_text = (
            "üîß *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n"
            "/admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "/all_curators - –≤—Å–µ –∫—É—Ä–∞—Ç–æ—Ä—ã\n"
            "/all_students_admin - –≤—Å–µ —É—á–µ–Ω–∏–∫–∏\n"
            "/notify_curators - —É–≤–µ–¥–æ–º–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö\n"
            "/add_curator - –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞\n"
            "/assign_student - –Ω–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä—É\n"
            "/remove_relation - —É–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å\n"
            "/deactivate_curator - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞\n"
            "/activate_curator - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞\n"
            "/students_without_curators - —É—á–µ–Ω–∏–∫–∏ –±–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤\n"
            "/admin_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/help - –ø–æ–º–æ—â—å"
        )
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üë• –í—Å–µ –∫—É—Ä–∞—Ç–æ—Ä—ã"), KeyboardButton(text="üë• –í—Å–µ —É—á–µ–Ω–∏–∫–∏")],
                [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞")],
                [KeyboardButton(text="üîó –ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å")],
                [KeyboardButton(text="üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞"), KeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞")],
                [KeyboardButton(text="üë• –ë–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å –∞–¥–º–∏–Ω–∞")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
    elif user_type == 'curator':
        help_text = (
            "üë®‚Äçüè´ *–ö–æ–º–∞–Ω–¥—ã –∫—É—Ä–∞—Ç–æ—Ä–∞:*\n\n"
            "/curator - –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞\n"
            "/add_student - –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞\n"
            "/my_students - –º–æ–∏ —É—á–µ–Ω–∏–∫–∏\n"
            "/all_students - –≤—Å–µ —É—á–µ–Ω–∏–∫–∏ –∏ –∏—Ö –∫—É—Ä–∞—Ç–æ—Ä—ã\n"
            "/reports - –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n"
            "/help - –ø–æ–º–æ—â—å"
        )
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"), KeyboardButton(text="üë• –ú–æ–∏ —É—á–µ–Ω–∏–∫–∏")],
                [KeyboardButton(text="üìã –í—Å–µ —É—á–µ–Ω–∏–∫–∏"), KeyboardButton(text="üìù –û—Ç—á–µ—Ç—ã")],
                [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
    else:
        help_text = (
            "üìù *–ö–æ–º–∞–Ω–¥—ã —É—á–µ–Ω–∏–∫–∞:*\n\n"
            "/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
            "/report - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç\n"
            "/my_reports - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –æ—Ç—á–µ—Ç—ã\n"
            "/help - –ø–æ–º–æ—â—å"
        )
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"), KeyboardButton(text="üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã")],
                [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
    
    return help_text, keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def random_message_handler(message):
    user_id = message.from_user.id
    
    help_text, keyboard = await get_role_based_help(user_id)
    await message.answer(help_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def help_handler(message: Message):
    user_id = message.from_user.id
    help_text, keyboard = await get_role_based_help(user_id)
    await message.answer(help_text, reply_markup=keyboard)

async def main():
    await db.init_db()
    
    reminder_task = asyncio.create_task(scheduler.start_weekly_reminders())
    
    try:
        await dp.start_polling(bot)
    finally:
        reminder_task.cancel()

if __name__ == "__main__":
    asyncio.run(main())
