import logging
from datetime import datetime
from aiogram import Bot
from database import Database

logger = logging.getLogger(__name__)

class NotificationService:
    def __init__(self, bot: Bot, db: Database):
        self.bot = bot
        self.db = db

    async def notify_curator_new_report(self, student_id: int, report_data: dict):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –æ—Ç—á–µ—Ç–µ –æ—Ç —É—á–µ–Ω–∏–∫–∞"""
        curator = await self.db.get_student_curator(student_id)
        if not curator:
            return
        
        try:
            await self.bot.send_message(
                curator['user_id'],
                f"üìù *–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç —É—á–µ–Ω–∏–∫–∞!*\n\n"
                f"üéØ *–≠—Ç–∞–ø:* {report_data['current_stage']}\n"
                f"üìã *–ü–ª–∞–Ω—ã:* {report_data['plans']}\n"
                f"‚ùì *–ü—Ä–æ–±–ª–µ–º—ã:* {report_data['problems']}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reports –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞ {curator['user_id']}: {e}")

    async def notify_student_curator_assigned(self, student_id: int):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —É—á–µ–Ω–∏–∫–∞ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞"""
        try:
            await self.bot.send_message(
                student_id,
                f"üë®‚Äçüè´ *–ö —Ç–µ–±–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä!*\n\n"
                f"–¢–µ–ø–µ—Ä—å —Ç–≤–æ–∏ –æ—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –∫—É—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ {student_id}: {e}")

    async def notify_student_report_read(self, student_id: int, report_data: dict):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —É—á–µ–Ω–∏–∫–∞ –æ —Ç–æ–º, —á—Ç–æ –∫—É—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –µ–≥–æ –æ—Ç—á–µ—Ç"""
        try:
            await self.bot.send_message(
                student_id,
                "‚úÖ *–¢–≤–æ–π –æ—Ç—á–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä–æ–º!*\n\n"
                f"üéØ *–≠—Ç–∞–ø:* {report_data['current_stage']}\n"
                f"üìã *–ü–ª–∞–Ω—ã:* {report_data['plans']}\n"
                f"‚ùì *–ü—Ä–æ–±–ª–µ–º—ã:* {report_data['problems']}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ {student_id}: {e}")

    async def send_weekly_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞–º"""
        users = await self.db.get_all_active_users()
        
        for user in users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
            current_week_reports = await self.db.get_reports_for_current_week(user['user_id'])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç—á–µ—Ç–∞ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
            if not current_week_reports:
                try:
                    await self.bot.send_message(
                        user['user_id'],
                        "üìù *–í—Ä–µ–º—è –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞!*\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –æ—Ç—á–µ—Ç –ø–æ —Ñ–æ—Ä–º–µ:\n"
                        "‚Ä¢ –ù–∞ –∫–∞–∫–æ–º —Å–µ–π—á–∞—Å —ç—Ç–∞–ø–µ? (—ç—Ç–∞–ø + —Ç–µ–º–∞)\n"
                        "‚Ä¢ –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–µ–ª–∞—Ç—å?\n"
                        "‚Ä¢ –ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É 'üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è."
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")

    async def send_curator_missing_reports_notifications(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö –∏—Ö —É—á–µ–Ω–∏–∫–æ–≤"""
        curators = await self.db.get_all_curators()
        
        for curator in curators:
            students = await self.db.get_curator_students(curator['user_id'])
            missing_reports_students = []
            
            for student in students:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
                current_week_reports = await self.db.get_reports_for_current_week(student['user_id'])
                
                if not current_week_reports:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞
                    student_name = f"{student['first_name']} {student['last_name']}" if student['first_name'] and student['last_name'] else student['username'] or f"ID: {student['user_id']}"
                    missing_reports_students.append(student_name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ã –±–µ–∑ –æ—Ç—á–µ—Ç–æ–≤
            if missing_reports_students:
                try:
                    students_list = "\n".join([f"‚Ä¢ {name}" for name in missing_reports_students])
                    await self.bot.send_message(
                        curator['user_id'],
                        f"‚ö†Ô∏è *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞*\n\n"
                        f"–°–ª–µ–¥—É—é—â–∏–µ —É—á–µ–Ω–∏–∫–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:\n\n"
                        f"{students_list}\n\n"
                        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏ –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω."
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä—É {curator['user_id']}: {e}")
